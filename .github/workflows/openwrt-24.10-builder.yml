name: Build ImmortalWrt-24.10 for N1

on:
  workflow_dispatch:
   inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
#  schedule:
#    - cron: "0 0 1,16 * *"

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: v24.10
  CONFIG_FILE: N1/.config
  DIY_SH: N1/diy.sh
  FILES: N1/files
  TZ: Asia/Shanghai
  GITHUB_TOKEN: ${{ secrets.TOKEN }}

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 准备完成
      uses: actions/checkout@main

    - name: Free up space
      uses: AdityaGarg8/remove-unwanted-software@v5
      with:
        remove-dotnet: "true"
        remove-android: "true"
        remove-haskell: "true"
        remove-codeql: "true"
        remove-docker-images: "true"
        remove-large-packages: "true"
        remove-cached-tools: "true"
        remove-swapfile: "true"

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        # sudo -E apt-get -qq update -y
        # sudo -E apt-get -qq install -y $(curl -fsSL https://raw.githubusercontent.com/nantayo/My-Pkg/master/2305) #2410
        # sudo -E apt-get -qq install -y zstd
        sudo bash -c 'bash <(curl -s https://build-scripts.immortalwrt.org/init_build_environment.sh)'
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 克隆源码
      working-directory: /workdir
      run: |
        LatestTag=$(curl -s https://api.github.com/repos/immortalwrt/immortalwrt/tags | jq -r --arg branch "$REPO_BRANCH" '.[] | select((.name | contains($branch)) and (.name| contains("-rc") | not)) | .name' | head -n 1)
        echo "获取到'$REPO_BRANCH'版本最新稳定版tag: '$LatestTag'"
        if [[ -z $LatestTag ]]; then
            echo "No stable tag found! Use the default branch openwrt-24.10"
            LatestTag='openwrt-24.10'
        fi
        echo "USETAG=$LatestTag" >> $GITHUB_ENV
        echo "编译使用分支: '$USETAG'"
        git clone $REPO_URL -b $LatestTag --single-branch --depth=1 openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 缓存构建动作
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: N1-${{ env.REPO_BRANCH }}
        prefix: ${{ github.workspace }}/openwrt

    - name: 更新 & 安装 feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e $FILES ] && mv $FILES openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_SH

    - name: SSH 连接到 Actions
      uses: P3TERX/ssh2actions@main
      if: (github.event.inputs.ssh == 'true') || contains(github.event.action, 'ssh')

    - name: 下载软件包
      working-directory: ./openwrt
      run: |
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      run: |
        chmod -R 755 openwrt
        cd openwrt
        ./scripts/diffconfig.sh > diffconfig
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "compile_status=success" >> $GITHUB_ENV
        rm -rf ${{ github.workspace }}/openwrt/bin/targets/*/*/packages
        df -hT
        
    - name: Free up space2
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true


    - name: 打包镜像文件
      if: ${{ env.compile_status }} == 'success' && !cancelled()
      uses: unifreq/openwrt_packit@master
      env:
        OPENWRT_ARMVIRT: openwrt/bin/targets/*/*/*.tar.gz
        KERNEL_VERSION_NAME: 6.6.60
        KERNEL_AUTO_LATEST: true
        PACKAGE_SOC: s905d
        GZIP_IMGS: .xz
        SCRIPT_DIY_PATH: N1/mk_s905d_n1.sh
        WHOAMI: haohaoget
        SW_FLOWOFFLOAD: 0
        SFE_FLOW: 0
        ENABLE_WIFI_K510: 0

    - name: 生成发布标签
      if: ${{ env.PACKAGED_STATUS == 'success' && !cancelled() }} 
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H.%M")" >> ${GITHUB_OUTPUT}
        touch release.txt
        echo "
        🍁 注意事项：首次使用建议全新刷写
          
        💻 适用机型: 斐讯N1

        📂 源码: ${{ env.REPO_URL }}

        🌳 分支: ${{ env.USETAG }}

        ⏱️ 编译时间: $(date +"%Y年%m月%d日%H时%M分")

        🌐 管理地址: 192.168.2.5

        👤 用户名: root

        🔒 密码: password 
        
        " >> release.txt
        echo "tag_status=success" >> $GITHUB_ENV

    - name: 发布固件到 Releases
      uses: softprops/action-gh-release@v2
      if: ${{ env.tag_status == 'success' && env.PACKAGED_STATUS == 'success' && !cancelled() }}
      with:
        tag_name: OpenWrt_${{ env.PACKAGED_OUTPUTDATE }}
        files: |
             ${{ env.PACKAGED_OUTPUTPATH }}/*.img.xz
             ${{ github.workspace }}/openwrt/diffconfig
        body_path: release.txt
        token: ${{ env.GITHUB_TOKEN }}

    - name: 电报机器人信息通知
      if: env.TELEGRAM_BOT_TOKEN && ${{ env.PACKAGED_STATUS == 'success' }} && !cancelled()
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=我亲爱的✨主人✨：您使用【 ${{ env.REPO_URL }} 】源码编译【${USETAG}分支的固件编译${{ env.PACKAGED_STATUS }}了！($(date +%Y年%m月%d号%H时%M分))" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"


    - name: 删除运行记录
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 1
        token: ${{ env.GITHUB_TOKEN }}

    - name: 删除自动发布的旧固件
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 2
        delete_tags : true
